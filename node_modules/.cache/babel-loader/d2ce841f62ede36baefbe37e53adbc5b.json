{"ast":null,"code":"var _jsxFileName = \"/Users/silvananggia/Documents/Hell/HellLab/HippoNFT/hippofamilynft-presale/src/Home.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport { awaitTransactionSignatureConfirmation, getCandyMachineState, mintOneToken, shortenAddress } from \"./candy-machine\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectButton = styled(WalletDialogButton)`\nfont-family: \"Balsamiq Sans\";\ntext-transform: uppercase;\ncolor: #fff;\nbackground-color: #5ca9fb;\nbackground-image: linear-gradient(to right, #5ca9fb 0%, #6372ff 100%);\npadding: 14px 34px;\nletter-spacing: 1px;\nmargin: 0;\nfont-size: 48px;\nfont-weight: 500;\nborder-radius: 25px;\ntransition: all 0.5s linear;\nborder: 0;\n`;\n_c = ConnectButton;\nconst CounterText = styled.span`\n\n`; // add your styles here\n\n_c2 = CounterText;\nconst MintContainer = styled.div`\n`; // add your styles here\n\n_c3 = MintContainer;\nconst MintButton = styled(Button)`\nfont-family: \"Balsamiq Sans\";\ntext-transform: uppercase;\ncolor: #fff;\nbackground-color: #5ca9fb;\nbackground-image: linear-gradient(to right, #5ca9fb 0%, #6372ff 100%);\npadding: 14px 34px;\nletter-spacing: 1px;\nmargin: 0;\nfont-size: 48px;\nfont-weight: 500;\nborder-radius: 25px;\ntransition: all 0.5s linear;\nborder: 0;`; // add your styles here\n\n_c4 = MintButton;\n\nconst Home = props => {\n  _s();\n\n  const [balance, setBalance] = useState();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [itemsAvailable, setItemsAvailable] = useState(0); //const [itemsRedeemed, setItemsRedeemed] = useState(0);\n\n  const [itemsRemaining, setItemsRemaining] = useState(0);\n  const [alertState, setAlertState] = useState({\n    open: false,\n    message: \"\",\n    severity: undefined\n  });\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState();\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n\n      if (wallet && (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.program)) {\n        const mintTxId = await mintOneToken(candyMachine, props.config, wallet.publicKey, props.treasury);\n        const status = await awaitTransactionSignatureConfirmation(mintTxId, props.txTimeout, props.connection, \"singleGossip\", false);\n\n        if (!(status === null || status === void 0 ? void 0 : status.err)) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\"\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\"\n          });\n        }\n      }\n    } catch (error) {\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n\n      if (!error.msg) {\n        if (error.message.indexOf(\"0x138\")) {} else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          setIsSoldOut(true);\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\"\n      });\n    } finally {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n\n      setIsMinting(false);\n      setIsActive(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n  useEffect(() => {\n    (async () => {\n      if (!wallet) return;\n      const {\n        candyMachine,\n        goLiveDate,\n        itemsAvailable,\n        itemsRemaining //itemsRedeemed,\n\n      } = await getCandyMachineState(wallet, props.candyMachineId, props.connection);\n      setItemsAvailable(itemsAvailable);\n      setItemsRemaining(itemsRemaining); //setItemsRedeemed(itemsRedeemed);\n\n      setIsActive(false);\n      setIsSoldOut(itemsRemaining === 0);\n      setStartDate(goLiveDate);\n      setCandyMachine(candyMachine);\n    })();\n  }, [wallet, props.candyMachineId, props.connection]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [wallet && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Wallet: \", shortenAddress(wallet.publicKey.toBase58() || \"\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }, this), wallet && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Your SOL Balance: \", (balance || 0).toLocaleString(), \" SOL\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(MintContainer, {\n      children: !wallet ? /*#__PURE__*/_jsxDEV(ConnectButton, {\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(MintButton, {\n        disabled: isSoldOut || isMinting || !isActive,\n        onClick: onMint,\n        variant: \"contained\",\n        children: isSoldOut ? \"SOLD OUT\" : isActive ? isMinting ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 17\n        }, this) : \"MINT\" : /*#__PURE__*/_jsxDEV(Countdown, {\n          date: startDate,\n          onMount: ({\n            completed\n          }) => completed && setIsActive(true),\n          onComplete: () => setIsActive(true),\n          renderer: renderCounter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: alertState.open,\n      autoHideDuration: 6000,\n      onClose: () => setAlertState({ ...alertState,\n        open: false\n      }),\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setAlertState({ ...alertState,\n          open: false\n        }),\n        severity: alertState.severity,\n        children: alertState.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"IuKbKYOo4sHibopdCAWLNXuF0Ro=\", false, function () {\n  return [useAnchorWallet];\n});\n\n_c5 = Home;\n\nconst renderCounter = ({\n  days,\n  hours,\n  minutes,\n  seconds,\n  completed\n}) => {\n  return /*#__PURE__*/_jsxDEV(CounterText, {\n    children: [days, \" Days ,\", hours, \" hours, \", minutes, \" minutes, \", seconds, \" seconds\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Home;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ConnectButton\");\n$RefreshReg$(_c2, \"CounterText\");\n$RefreshReg$(_c3, \"MintContainer\");\n$RefreshReg$(_c4, \"MintButton\");\n$RefreshReg$(_c5, \"Home\");","map":{"version":3,"sources":["/Users/silvananggia/Documents/Hell/HellLab/HippoNFT/hippofamilynft-presale/src/Home.tsx"],"names":["useEffect","useState","styled","Countdown","Button","CircularProgress","Snackbar","Alert","LAMPORTS_PER_SOL","useAnchorWallet","WalletDialogButton","awaitTransactionSignatureConfirmation","getCandyMachineState","mintOneToken","shortenAddress","ConnectButton","CounterText","span","MintContainer","div","MintButton","Home","props","balance","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","itemsAvailable","setItemsAvailable","itemsRemaining","setItemsRemaining","alertState","setAlertState","open","message","severity","undefined","startDate","setStartDate","Date","wallet","candyMachine","setCandyMachine","onMint","program","mintTxId","config","publicKey","treasury","status","txTimeout","connection","err","error","msg","indexOf","code","getBalance","goLiveDate","candyMachineId","toBase58","toLocaleString","completed","renderCounter","days","hours","minutes","seconds"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport {\n  CandyMachine,\n  awaitTransactionSignatureConfirmation,\n  getCandyMachineState,\n  mintOneToken,\n  shortenAddress,\n} from \"./candy-machine\";\n\nconst ConnectButton = styled(WalletDialogButton)`\nfont-family: \"Balsamiq Sans\";\ntext-transform: uppercase;\ncolor: #fff;\nbackground-color: #5ca9fb;\nbackground-image: linear-gradient(to right, #5ca9fb 0%, #6372ff 100%);\npadding: 14px 34px;\nletter-spacing: 1px;\nmargin: 0;\nfont-size: 48px;\nfont-weight: 500;\nborder-radius: 25px;\ntransition: all 0.5s linear;\nborder: 0;\n`;\n\nconst CounterText = styled.span`\n\n`; // add your styles here\n\nconst MintContainer = styled.div`\n`; // add your styles here\n\nconst MintButton = styled(Button)`\nfont-family: \"Balsamiq Sans\";\ntext-transform: uppercase;\ncolor: #fff;\nbackground-color: #5ca9fb;\nbackground-image: linear-gradient(to right, #5ca9fb 0%, #6372ff 100%);\npadding: 14px 34px;\nletter-spacing: 1px;\nmargin: 0;\nfont-size: 48px;\nfont-weight: 500;\nborder-radius: 25px;\ntransition: all 0.5s linear;\nborder: 0;`; // add your styles here\n\nexport interface HomeProps {\n  candyMachineId: anchor.web3.PublicKey;\n  config: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  treasury: anchor.web3.PublicKey;\n  txTimeout: number;\n}\n\nconst Home = (props: HomeProps) => {\n  const [balance, setBalance] = useState<number>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [itemsAvailable, setItemsAvailable] = useState(0);\n  //const [itemsRedeemed, setItemsRedeemed] = useState(0);\n  const [itemsRemaining, setItemsRemaining] = useState(0);\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\n\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n      if (wallet && candyMachine?.program) {\n        const mintTxId = await mintOneToken(\n          candyMachine,\n          props.config,\n          wallet.publicKey,\n          props.treasury\n        );\n\n        const status = await awaitTransactionSignatureConfirmation(\n          mintTxId,\n          props.txTimeout,\n          props.connection,\n          \"singleGossip\",\n          false\n        );\n\n        if (!status?.err) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (error.message.indexOf(\"0x138\")) {\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          setIsSoldOut(true);\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n    } finally {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n      setIsMinting(false);\n      setIsActive(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n\n  useEffect(() => {\n    (async () => {\n      if (!wallet) return;\n\n      const {\n        candyMachine,\n        goLiveDate,\n        itemsAvailable,\n        itemsRemaining,\n        //itemsRedeemed,\n      } = await getCandyMachineState(\n        wallet as anchor.Wallet,\n        props.candyMachineId,\n        props.connection\n      );\n\n      setItemsAvailable(itemsAvailable);\n      setItemsRemaining(itemsRemaining);\n      //setItemsRedeemed(itemsRedeemed);\n      setIsActive(false);\n\n      setIsSoldOut(itemsRemaining === 0);\n      setStartDate(goLiveDate);\n      setCandyMachine(candyMachine);\n    })();\n  }, [wallet, props.candyMachineId, props.connection]);\n\n  return (\n    <main>\n      {wallet && (\n        <p>Wallet: {shortenAddress(wallet.publicKey.toBase58() || \"\")}</p>\n      )}\n\n      {wallet && <p>Your SOL Balance: {(balance || 0).toLocaleString()} SOL</p>}\n\n      {/* {wallet && <p>Total Available: {itemsRemaining} / {itemsAvailable}</p>} */}\n\n\n      <MintContainer>\n        {!wallet ? (\n          <ConnectButton>Connect Wallet</ConnectButton>\n        ) : (\n          <MintButton\n            disabled={isSoldOut || isMinting || !isActive}\n            onClick={onMint}\n            variant=\"contained\"\n          >\n            { \n            isSoldOut ? (\n              \"SOLD OUT\"\n            ) : isActive ? (\n              isMinting ? (\n                <CircularProgress />\n              ) : (\n                \"MINT\"\n              )\n            ) : (\n              <Countdown\n                date={startDate}\n                onMount={({ completed }) => completed && setIsActive(true)}\n                onComplete={() => setIsActive(true)}\n                renderer={renderCounter}\n              />\n            )}\n          </MintButton>\n        )}\n      </MintContainer>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </main>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\n  return (\n    <CounterText>\n      {days} Days ,{hours} hours, {minutes} minutes, {seconds} seconds\n    </CounterText>\n  );\n};\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}